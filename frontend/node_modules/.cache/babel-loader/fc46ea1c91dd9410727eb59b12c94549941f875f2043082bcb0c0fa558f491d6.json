{"ast":null,"code":"import React,{useState}from'react';import SurveyForm from'./components/SurveyForm';import MoodChart from'./components/MoodChart';import Chatbox from'./components/Chatbox';// Import the Chatbox component\nimport'./App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[surveyData,setSurveyData]=useState([]);const calculateBurnoutScore=(entry,previousEntry)=>{let moodScore=0;switch(entry.mood){case'Happy':moodScore=1;break;case'Neutral':moodScore=2;break;case'Tired':case'Sad':moodScore=3;break;case'Angry':case'Depressed':moodScore=4;break;default:moodScore=2;}const homeworkScore=entry.homeworkHours*0.5;const extracurricularScore=entry.extracurricularHours*0.3;const gpaScore=entry.gpa>=3.5?2:1;let burnoutScore=moodScore+homeworkScore+extracurricularScore+gpaScore;// Check if the previous entry was a burnout\nif(previousEntry&&previousEntry.burnoutScore>=10){burnoutScore=Math.max(burnoutScore,previousEntry.burnoutScore-0.5);// Gradually decrease burnout\n}return burnoutScore;};const handleFormSubmit=formData=>{const previousEntry=surveyData[surveyData.length-1];const burnoutScore=calculateBurnoutScore(formData,previousEntry);setSurveyData([...surveyData,{...formData,burnoutScore}]);};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(SurveyForm,{onSubmit:handleFormSubmit}),/*#__PURE__*/_jsx(MoodChart,{data:surveyData}),/*#__PURE__*/_jsx(Chatbox,{submittedData:surveyData}),\" \"]});}//add function for new page\nexport default App;","map":{"version":3,"names":["React","useState","SurveyForm","MoodChart","Chatbox","jsx","_jsx","jsxs","_jsxs","App","surveyData","setSurveyData","calculateBurnoutScore","entry","previousEntry","moodScore","mood","homeworkScore","homeworkHours","extracurricularScore","extracurricularHours","gpaScore","gpa","burnoutScore","Math","max","handleFormSubmit","formData","length","className","children","onSubmit","data","submittedData"],"sources":["/Users/stephen/Desktop/student-wellness-tracker/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport SurveyForm from './components/SurveyForm';\nimport MoodChart from './components/MoodChart';\nimport Chatbox from './components/Chatbox'; // Import the Chatbox component\nimport './App.css';\n\nfunction App() {\n  const [surveyData, setSurveyData] = useState([]);\n\n  const calculateBurnoutScore = (entry, previousEntry) => {\n    let moodScore = 0;\n    switch (entry.mood) {\n      case 'Happy':\n        moodScore = 1;\n        break;\n      case 'Neutral':\n        moodScore = 2;\n        break;\n      case 'Tired':\n      case 'Sad':\n        moodScore = 3;\n        break;\n      case 'Angry':\n      case 'Depressed':\n        moodScore = 4;\n        break;\n      default:\n        moodScore = 2;\n    }\n\n    const homeworkScore = entry.homeworkHours * 0.5;\n    const extracurricularScore = entry.extracurricularHours * 0.3;\n    const gpaScore = entry.gpa >= 3.5 ? 2 : 1;\n\n    let burnoutScore = moodScore + homeworkScore + extracurricularScore + gpaScore;\n\n    // Check if the previous entry was a burnout\n    if (previousEntry && previousEntry.burnoutScore >= 10) {\n      burnoutScore = Math.max(burnoutScore, previousEntry.burnoutScore - 0.5); // Gradually decrease burnout\n    }\n\n    return burnoutScore;\n  };\n\n  const handleFormSubmit = (formData) => {\n    const previousEntry = surveyData[surveyData.length - 1];\n    const burnoutScore = calculateBurnoutScore(formData, previousEntry);\n    setSurveyData([...surveyData, { ...formData, burnoutScore }]);\n  };\n\n  return (\n    <div className=\"App\">\n      <SurveyForm onSubmit={handleFormSubmit} />\n      <MoodChart data={surveyData} />\n      <Chatbox submittedData={surveyData} /> {/* Pass surveyData to Chatbox */}\n    </div>\n  );\n}\n//add function for new page\nexport default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,CAAAC,UAAU,KAAM,yBAAyB,CAChD,MAAO,CAAAC,SAAS,KAAM,wBAAwB,CAC9C,MAAO,CAAAC,OAAO,KAAM,sBAAsB,CAAE;AAC5C,MAAO,WAAW,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEnB,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,UAAU,CAAEC,aAAa,CAAC,CAAGV,QAAQ,CAAC,EAAE,CAAC,CAEhD,KAAM,CAAAW,qBAAqB,CAAGA,CAACC,KAAK,CAAEC,aAAa,GAAK,CACtD,GAAI,CAAAC,SAAS,CAAG,CAAC,CACjB,OAAQF,KAAK,CAACG,IAAI,EAChB,IAAK,OAAO,CACVD,SAAS,CAAG,CAAC,CACb,MACF,IAAK,SAAS,CACZA,SAAS,CAAG,CAAC,CACb,MACF,IAAK,OAAO,CACZ,IAAK,KAAK,CACRA,SAAS,CAAG,CAAC,CACb,MACF,IAAK,OAAO,CACZ,IAAK,WAAW,CACdA,SAAS,CAAG,CAAC,CACb,MACF,QACEA,SAAS,CAAG,CAAC,CACjB,CAEA,KAAM,CAAAE,aAAa,CAAGJ,KAAK,CAACK,aAAa,CAAG,GAAG,CAC/C,KAAM,CAAAC,oBAAoB,CAAGN,KAAK,CAACO,oBAAoB,CAAG,GAAG,CAC7D,KAAM,CAAAC,QAAQ,CAAGR,KAAK,CAACS,GAAG,EAAI,GAAG,CAAG,CAAC,CAAG,CAAC,CAEzC,GAAI,CAAAC,YAAY,CAAGR,SAAS,CAAGE,aAAa,CAAGE,oBAAoB,CAAGE,QAAQ,CAE9E;AACA,GAAIP,aAAa,EAAIA,aAAa,CAACS,YAAY,EAAI,EAAE,CAAE,CACrDA,YAAY,CAAGC,IAAI,CAACC,GAAG,CAACF,YAAY,CAAET,aAAa,CAACS,YAAY,CAAG,GAAG,CAAC,CAAE;AAC3E,CAEA,MAAO,CAAAA,YAAY,CACrB,CAAC,CAED,KAAM,CAAAG,gBAAgB,CAAIC,QAAQ,EAAK,CACrC,KAAM,CAAAb,aAAa,CAAGJ,UAAU,CAACA,UAAU,CAACkB,MAAM,CAAG,CAAC,CAAC,CACvD,KAAM,CAAAL,YAAY,CAAGX,qBAAqB,CAACe,QAAQ,CAAEb,aAAa,CAAC,CACnEH,aAAa,CAAC,CAAC,GAAGD,UAAU,CAAE,CAAE,GAAGiB,QAAQ,CAAEJ,YAAa,CAAC,CAAC,CAAC,CAC/D,CAAC,CAED,mBACEf,KAAA,QAAKqB,SAAS,CAAC,KAAK,CAAAC,QAAA,eAClBxB,IAAA,CAACJ,UAAU,EAAC6B,QAAQ,CAAEL,gBAAiB,CAAE,CAAC,cAC1CpB,IAAA,CAACH,SAAS,EAAC6B,IAAI,CAAEtB,UAAW,CAAE,CAAC,cAC/BJ,IAAA,CAACF,OAAO,EAAC6B,aAAa,CAAEvB,UAAW,CAAE,CAAC,IAAC,EACpC,CAAC,CAEV,CACA;AACA,cAAe,CAAAD,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}